C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of do_interpolations in reverse (adjoint) mode:
C   gradient     of useful results: qg
C   with respect to varying inputs: qg
C   RW status of diff variables: qg:in-out
C***********************************************************************
      SUBROUTINE DO_INTERPOLATIONS_BQ(qg, qgb, jmx, kmx, ibcg, imeshg, 
     +                                idonorg, fracg, nfringeg, ndonorg
     +                                , iisptrg, iieptrg, idsize, qsize
     +                                , nmesh)
      USE PARAMS_GLOBAL
      IMPLICIT NONE
C***********************************************************************
C***********************************************************************
      INTEGER idsize, qsize, nmesh
      INTEGER jmx(nmesh), kmx(nmesh)
      INTEGER nfringeg(nmesh, nspec), ndonorg(nmesh, nspec)
      INTEGER iisptrg(nmesh, nspec), iieptrg(nmesh, nspec)
      REAL qg(qsize)
      REAL qgb(qsize)
      INTEGER imeshg(idsize, 2, nmesh, nspec), idonorg(idsize, 2, nmesh
     +        , nspec)
      INTEGER ibcg(idsize, nmesh, nspec)
      REAL fracg(idsize, 2, nmesh, nspec)
C
C..local variables
C
      INTEGER bcdim, ii, jj, kk, iim, jjm, iip, jjp, kkp, id, j, k, n, 
     +        is, nf, ndon, im
      INTEGER qptr, nfringe, ndonor, iisptr, iieptr, nsp
      REAL djm1, dj0, djp1, dkm1, dk0, dkp1
      REAL w1, w2, w3, w4, w5, w6, w7, w8, w9, onefourth
      REAL, ALLOCATABLE :: qbc(:, :)
      REAL, ALLOCATABLE :: qbcb(:, :)
      REAL, ALLOCATABLE :: q(:, :, :)
      REAL, ALLOCATABLE :: qb(:, :, :)
      REAL tmp
      INTEGER ad_to
      INTEGER ad_to0
      INTEGER ad_to1
      INTEGER ad_to2
      INTEGER ad_to3
      INTEGER ad_to4
      INTEGER ad_to5
      INTEGER ad_to6
      REAL tmpb
      REAL tempb
C
      onefourth = 1./4
C
C!!$OMP PARALLEL IF (NSPEC > 1)
C!
C!!$OMP DO
C!!$OMP& PRIVATE(bcdim,ii,jj,kk,iim,jjm,iip,jjp,kkp,id,j,k,n,is,nf,ndon,im)
C!!$OMP& PRIVATE(qptr,nfringe,ndonor,iisptr,iieptr)
C!!$OMP& PRIVATE(djm1,dj0,djp1,dkm1,dk0,dkp1)
C!!$OMP& PRIVATE(w1,w2,w3,w4,w5,w6,w7,w8,w9)
C!!$OMP& PRIVATE(q,qbc)
C
      spectralloop:DO nsp=1,nspec
        bcdim=iieptrg(nmesh,nsp)
        ALLOCATE(qbcb(bcdim, nv))
C
        ALLOCATE(qbc(bcdim, nv))
C
C...LOOP THROUGH ALL THE MESHES AND COLLECT GLOBAL QBC
C
        qptr = 1
        DO im=1,nmesh
C
          ndonor = ndonorg(im, nsp)
          iisptr = iisptrg(im, nsp)
          jmax = jmx(im)
          kmax = kmx(im)
          ALLOCATE(qb(jmax, kmax, nq))
          ALLOCATE(q(jmax, kmax, nq))
C.....assign local q from global values
C
          DO n=1,nq
            DO k=1,kmax
              CALL PUSHINTEGER4(j)
              DO j=1,jmax
                CALL PUSHREAL8(q(j, k, n))
                q(j, k, n) = qg(qptr-1+jmax*kmax*nspec*(n-1)+jmax*kmax*(
     +            nsp-1)+jmax*(k-1)+j)
              ENDDO
              CALL PUSHINTEGER4(j - 1)
            ENDDO
            CALL PUSHINTEGER4(k - 1)
          ENDDO
          CALL PUSHINTEGER4(qptr)
C
          qptr = qptr + jmax*kmax*nspec*nq
          DO id=1,ndonor
            CALL PUSHINTEGER4(ii)
C
            ii = idonorg(id, 1, im, nsp)
            CALL PUSHINTEGER4(jj)
            jj = idonorg(id, 2, im, nsp)
            CALL PUSHINTEGER4(iim)
C
            iim = ii - 1
            CALL PUSHINTEGER4(jjm)
            jjm = jj - 1
            CALL PUSHINTEGER4(iip)
C
            iip = ii + 1
            CALL PUSHINTEGER4(jjp)
            jjp = jj + 1
C
            djm1 = 1. + fracg(id, 1, im, nsp)
            dkm1 = 1. + fracg(id, 2, im, nsp)
            dj0 = fracg(id, 1, im, nsp)
            dk0 = fracg(id, 2, im, nsp)
            djp1 = 1. - fracg(id, 1, im, nsp)
            dkp1 = 1. - fracg(id, 2, im, nsp)
            CALL PUSHREAL8(w1)
C
            w1 = dj0*djp1*dk0*dkp1*onefourth
            CALL PUSHREAL8(w2)
            w2 = -(2*(djm1*djp1*dk0*dkp1)*onefourth)
            CALL PUSHREAL8(w3)
            w3 = -(djm1*dj0*dk0*dkp1*onefourth)
            CALL PUSHREAL8(w4)
            w4 = -(2*(dj0*djp1*dkm1*dkp1)*onefourth)
            CALL PUSHREAL8(w5)
            w5 = 4*(djm1*djp1*dkm1*dkp1)*onefourth
            CALL PUSHREAL8(w6)
            w6 = 2*(djm1*dj0*dkm1*dkp1)*onefourth
            CALL PUSHREAL8(w7)
            w7 = -(dj0*djp1*dkm1*dk0*onefourth)
            CALL PUSHREAL8(w8)
            w8 = 2*(djm1*djp1*dkm1*dk0)*onefourth
            CALL PUSHREAL8(w9)
            w9 = djm1*dj0*dkm1*dk0*onefourth
C
C.....collect in global pointer qbc from pointer iisptr->iieptr
C
            DO n=1,nmv
              CALL PUSHREAL8(qbc(iisptr-1+id, n))
              qbc(iisptr-1+id, n) = w1*q(iim, jjm, n)*q(iim, jjm, nq) + 
     +          w2*q(ii, jjm, n)*q(ii, jjm, nq) + w3*q(iip, jjm, n)*q(
     +          iip, jjm, nq) + w4*q(iim, jj, n)*q(iim, jj, nq) + w5*q(
     +          ii, jj, n)*q(ii, jj, nq) + w6*q(iip, jj, n)*q(iip, jj, 
     +          nq) + w7*q(iim, jjp, n)*q(iim, jjp, nq) + w8*q(ii, jjp, 
     +          n)*q(ii, jjp, nq) + w9*q(iip, jjp, n)*q(iip, jjp, nq)
            ENDDO
C
            DO n=nmv+1,nv
              CALL PUSHREAL8(qbc(iisptr-1+id, n))
              qbc(iisptr-1+id, n) = w1*q(iim, jjm, n) + w2*q(ii, jjm, n)
     +          + w3*q(iip, jjm, n) + w4*q(iim, jj, n) + w5*q(ii, jj, n)
     +          + w6*q(iip, jj, n) + w7*q(iim, jjp, n) + w8*q(ii, jjp, n
     +          ) + w9*q(iip, jjp, n)
            ENDDO
          ENDDO
          CALL PUSHINTEGER4(id - 1)
          deallocate(q,qb)
        ENDDO
C
C...LOOP THROUGH ALL MESHES AND UPDATE VALUES FROM QBC ARRAY
C
        qptr = 1
        DO im=1,nmesh
C
          nfringe = nfringeg(im, nsp)
          jmax = jmx(im)
          kmax = kmx(im)
          ALLOCATE(qb(jmax, kmax, nq))
C
          ALLOCATE(q(jmax, kmax, nq))
C
C.....re-assign local q from global values
          DO n=1,nq
            DO k=1,kmax
              CALL PUSHINTEGER4(j)
              DO j=1,jmax
                CALL PUSHREAL8(q(j, k, n))
                q(j, k, n) = qg(qptr-1+jmax*kmax*nspec*(n-1)+jmax*kmax*(
     +            nsp-1)+jmax*(k-1)+j)
              ENDDO
              CALL PUSHINTEGER4(j - 1)
            ENDDO
            CALL PUSHINTEGER4(k - 1)
          ENDDO
C
C.....over write fringe points solution w/ donor global qbc solution
C
          DO id=1,nfringe
            CALL PUSHINTEGER4(j)
            j = ibcg(id, im, nsp)
            CALL PUSHINTEGER4(ii)
            ii = imeshg(id, 1, im, nsp)
            CALL PUSHINTEGER4(jj)
            jj = imeshg(id, 2, im, nsp)
C
            DO n=1,nmv
              tmp = qbc(j, n)/q(ii, jj, nq)
              CALL PUSHREAL8(q(ii, jj, n))
              q(ii, jj, n) = tmp
            ENDDO
C
            DO n=nmv+1,nv
              CALL PUSHREAL8(q(ii, jj, n))
              q(ii, jj, n) = qbc(j, n)
            ENDDO
          ENDDO
          CALL PUSHINTEGER4(id - 1)
C
C.....reassign qbc to global q (containing all Ng meshes)
          DO n=1,nv
            DO k=1,kmax
              CALL PUSHINTEGER4(j)
              DO j=1,jmax
                qg(qptr-1+jmax*kmax*nspec*(n-1)+jmax*kmax*(nsp-1)+jmax*(
     +          k-1)+j) = q(j, k, n)
              ENDDO
              CALL PUSHINTEGER4(j - 1)
            ENDDO
            CALL PUSHINTEGER4(k - 1)
          ENDDO
          CALL PUSHINTEGER4(qptr)
C
          qptr = qptr + jmax*kmax*nspec*nq
C
          deallocate(q,qb)
        ENDDO
        !am?deallocate(qbcb,qbc)
      ENDDO spectralloop
      !am?qb(1:jmax, 1:kmax, 1:nq) = 0.0
      !am?qb(1:jmax, 1:kmax, 1:nq) = 0.0
      qbcb(1:bcdim, 1:nv) = 0.0
      DO nsp=nspec,1,-1
        DO im=nmesh,1,-1
          kmax = kmx(im)
          jmax = jmx(im)
          ALLOCATE(qb(jmax, kmax, nq)) !asitav
          ALLOCATE(q(jmax, kmax, nq)) !asitav
          qb(1:jmax, 1:kmax, 1:nq) = 0.0 !asitav
          
          CALL POPINTEGER4(qptr)
          DO n=nv,1,-1
            CALL POPINTEGER4(ad_to6)
            DO k=ad_to6,1,-1
              CALL POPINTEGER4(ad_to5)
              DO j=ad_to5,1,-1
                qb(j, k, n) = qb(j, k, n) + qgb(qptr-1+jmax*kmax*nspec*(
     +            n-1)+jmax*kmax*(nsp-1)+jmax*(k-1)+j)
                qgb(qptr-1+jmax*kmax*nspec*(n-1)+jmax*kmax*(nsp-1)+jmax*
     +          (k-1)+j) = 0.0
              ENDDO
              CALL POPINTEGER4(j)
            ENDDO
          ENDDO
          CALL POPINTEGER4(ad_to4)
          DO id=ad_to4,1,-1
            DO n=nv,nmv+1,-1
              CALL POPREAL8(q(ii, jj, n))
              qbcb(j, n) = qbcb(j, n) + qb(ii, jj, n)
              qb(ii, jj, n) = 0.0
            ENDDO
            DO n=nmv,1,-1
              CALL POPREAL8(q(ii, jj, n))
              tmpb = qb(ii, jj, n)
              qb(ii, jj, n) = 0.0
              tempb = tmpb/q(ii, jj, nq)
              qbcb(j, n) = qbcb(j, n) + tempb
              qb(ii, jj, nq) = qb(ii, jj, nq) - qbc(j, n)*tempb/q(ii, jj
     +          , nq)
            ENDDO
            CALL POPINTEGER4(jj)
            CALL POPINTEGER4(ii)
            CALL POPINTEGER4(j)
          ENDDO
          DO n=nq,1,-1
            CALL POPINTEGER4(ad_to3)
            DO k=ad_to3,1,-1
              CALL POPINTEGER4(ad_to2)
              DO j=ad_to2,1,-1
                CALL POPREAL8(q(j, k, n))
                qgb(qptr-1+jmax*kmax*nspec*(n-1)+jmax*kmax*(nsp-1)+jmax*
     +          (k-1)+j) = qgb(qptr-1+jmax*kmax*nspec*(n-1)+jmax*kmax*(
     +            nsp-1)+jmax*(k-1)+j) + qb(j, k, n)
                qb(j, k, n) = 0.0
              ENDDO
              CALL POPINTEGER4(j)
            ENDDO
          ENDDO
          DEALLOCATE(q)
          DEALLOCATE(qb)
        ENDDO
        DO im=nmesh,1,-1
          iisptr = iisptrg(im, nsp)
          kmax = kmx(im)
          jmax = jmx(im)
          ALLOCATE(qb(jmax, kmax, nq)) !asitav
          ALLOCATE(q(jmax, kmax, nq)) !asitav
          CALL POPINTEGER4(ad_to1)
          DO id=ad_to1,1,-1
            DO n=nv,nmv+1,-1
              CALL POPREAL8(qbc(iisptr-1+id, n))
              qb(iim, jjm, n) = qb(iim, jjm, n) + w1*qbcb(iisptr-1+id, n
     +          )
              qb(ii, jjm, n) = qb(ii, jjm, n) + w2*qbcb(iisptr-1+id, n)
              qb(iip, jjm, n) = qb(iip, jjm, n) + w3*qbcb(iisptr-1+id, n
     +          )
              qb(iim, jj, n) = qb(iim, jj, n) + w4*qbcb(iisptr-1+id, n)
              qb(ii, jj, n) = qb(ii, jj, n) + w5*qbcb(iisptr-1+id, n)
              qb(iip, jj, n) = qb(iip, jj, n) + w6*qbcb(iisptr-1+id, n)
              qb(iim, jjp, n) = qb(iim, jjp, n) + w7*qbcb(iisptr-1+id, n
     +          )
              qb(ii, jjp, n) = qb(ii, jjp, n) + w8*qbcb(iisptr-1+id, n)
              qb(iip, jjp, n) = qb(iip, jjp, n) + w9*qbcb(iisptr-1+id, n
     +          )
              qbcb(iisptr-1+id, n) = 0.0
            ENDDO
            DO n=nmv,1,-1
              CALL POPREAL8(qbc(iisptr-1+id, n))
              qb(iim, jjm, n) = qb(iim, jjm, n) + w1*q(iim, jjm, nq)*
     +          qbcb(iisptr-1+id, n)
              qb(iim, jjm, nq) = qb(iim, jjm, nq) + w1*q(iim, jjm, n)*
     +          qbcb(iisptr-1+id, n)
              qb(ii, jjm, n) = qb(ii, jjm, n) + w2*q(ii, jjm, nq)*qbcb(
     +          iisptr-1+id, n)
              qb(ii, jjm, nq) = qb(ii, jjm, nq) + w2*q(ii, jjm, n)*qbcb(
     +          iisptr-1+id, n)
              qb(iip, jjm, n) = qb(iip, jjm, n) + w3*q(iip, jjm, nq)*
     +          qbcb(iisptr-1+id, n)
              qb(iip, jjm, nq) = qb(iip, jjm, nq) + w3*q(iip, jjm, n)*
     +          qbcb(iisptr-1+id, n)
              qb(iim, jj, n) = qb(iim, jj, n) + w4*q(iim, jj, nq)*qbcb(
     +          iisptr-1+id, n)
              qb(iim, jj, nq) = qb(iim, jj, nq) + w4*q(iim, jj, n)*qbcb(
     +          iisptr-1+id, n)
              qb(ii, jj, n) = qb(ii, jj, n) + w5*q(ii, jj, nq)*qbcb(
     +          iisptr-1+id, n)
              qb(ii, jj, nq) = qb(ii, jj, nq) + w5*q(ii, jj, n)*qbcb(
     +          iisptr-1+id, n)
              qb(iip, jj, n) = qb(iip, jj, n) + w6*q(iip, jj, nq)*qbcb(
     +          iisptr-1+id, n)
              qb(iip, jj, nq) = qb(iip, jj, nq) + w6*q(iip, jj, n)*qbcb(
     +          iisptr-1+id, n)
              qb(iim, jjp, n) = qb(iim, jjp, n) + w7*q(iim, jjp, nq)*
     +          qbcb(iisptr-1+id, n)
              qb(iim, jjp, nq) = qb(iim, jjp, nq) + w7*q(iim, jjp, n)*
     +          qbcb(iisptr-1+id, n)
              qb(ii, jjp, n) = qb(ii, jjp, n) + w8*q(ii, jjp, nq)*qbcb(
     +          iisptr-1+id, n)
              qb(ii, jjp, nq) = qb(ii, jjp, nq) + w8*q(ii, jjp, n)*qbcb(
     +          iisptr-1+id, n)
              qb(iip, jjp, n) = qb(iip, jjp, n) + w9*q(iip, jjp, nq)*
     +          qbcb(iisptr-1+id, n)
              qb(iip, jjp, nq) = qb(iip, jjp, nq) + w9*q(iip, jjp, n)*
     +          qbcb(iisptr-1+id, n)
              qbcb(iisptr-1+id, n) = 0.0
            ENDDO
            CALL POPREAL8(w9)
            CALL POPREAL8(w8)
            CALL POPREAL8(w7)
            CALL POPREAL8(w6)
            CALL POPREAL8(w5)
            CALL POPREAL8(w4)
            CALL POPREAL8(w3)
            CALL POPREAL8(w2)
            CALL POPREAL8(w1)
            CALL POPINTEGER4(jjp)
            CALL POPINTEGER4(iip)
            CALL POPINTEGER4(jjm)
            CALL POPINTEGER4(iim)
            CALL POPINTEGER4(jj)
            CALL POPINTEGER4(ii)
          ENDDO
          kmax = kmx(im)
          jmax = jmx(im)
          CALL POPINTEGER4(qptr)
          DO n=nq,1,-1
            CALL POPINTEGER4(ad_to0)
            DO k=ad_to0,1,-1
              CALL POPINTEGER4(ad_to)
              DO j=ad_to,1,-1
                CALL POPREAL8(q(j, k, n))
                qgb(qptr-1+jmax*kmax*nspec*(n-1)+jmax*kmax*(nsp-1)+jmax*
     +          (k-1)+j) = qgb(qptr-1+jmax*kmax*nspec*(n-1)+jmax*kmax*(
     +            nsp-1)+jmax*(k-1)+j) + qb(j, k, n)
                qb(j, k, n) = 0.0
              ENDDO
              CALL POPINTEGER4(j)
            ENDDO
          ENDDO
          !amm DEALLOCATE(q)
          DEALLOCATE(qb)
        ENDDO
        DEALLOCATE(qbc)
        DEALLOCATE(qbcb)
      ENDDO
      END
